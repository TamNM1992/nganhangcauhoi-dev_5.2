

import { AfterViewInit, Component, Injector, OnInit, ViewChild } from '@angular/core';
import { ColumnSchemaBase, ComponentContextService, DataListBase, CrudListComponent,  GridInfo, ModelSchema } from 'tnx-shared';
import { WorkflowPermissionService } from 'tnx-nganhangcauhoi-service/workflowpermission/services';
@Component({
    selector: 'workflowpermission',
    templateUrl: './workflowpermission.component.html',
    styleUrls: ['./workflowpermission.component.scss'],
    providers: [ComponentContextService],
})
export class WorkflowPermissionComponent extends DataListBase implements OnInit, AfterViewInit {
    searchSchema: any = {};
    searchData: any = {};
    constructor(
        protected _injector: Injector,
        protected _workflowPermissionService: WorkflowPermissionService,
    ) {
        super(_injector);
    }

    ngOnInit() {
        this.setting.baseService = this._workflowPermissionService;
        this.setting.modelSchemas = [
            new ModelSchema({
				field: 'allowEdit',
				name: '',
				fullName: '',
				description: '',
				dataType: 'boolean',
			}),
			new ModelSchema({
				field: 'code',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'completed',
				name: '',
				fullName: '',
				description: '',
				dataType: 'boolean',
			}),
			new ModelSchema({
				field: 'created',
				name: '',
				fullName: '',
				description: '',
				dataType: 'datetime',
			}),
			new ModelSchema({
				field: 'createdBy',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'currentStateCode',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'donViIdLastInWorkflow',
				name: '',
				fullName: '',
				description: '',
			}),
			new ModelSchema({
				field: 'donViIds',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'entity',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'entityKey',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'groupIds',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'hemisCode',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'hemisId',
				name: '',
				fullName: '',
				description: '',
			}),
			new ModelSchema({
				field: 'id',
				name: '',
				fullName: '',
				description: '',
			}),
			new ModelSchema({
				field: 'idHistory',
				name: '',
				fullName: '',
				description: '',
			}),
			new ModelSchema({
				field: 'isBuildIn',
				name: '',
				fullName: '',
				description: '',
				dataType: 'boolean',
			}),
			new ModelSchema({
				field: 'isBuildInAll',
				name: '',
				fullName: '',
				description: '',
				dataType: 'boolean',
			}),
			new ModelSchema({
				field: 'isDeleted',
				name: '',
				fullName: '',
				description: '',
				dataType: 'boolean',
			}),
			new ModelSchema({
				field: 'isPrivate',
				name: '',
				fullName: '',
				description: '',
				dataType: 'boolean',
			}),
			new ModelSchema({
				field: 'isPublic',
				name: '',
				fullName: '',
				description: '',
				dataType: 'boolean',
			}),
			new ModelSchema({
				field: 'itemId',
				name: '',
				fullName: '',
				description: '',
			}),
			new ModelSchema({
				field: 'link',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'modified',
				name: '',
				fullName: '',
				description: '',
				dataType: 'datetime',
			}),
			new ModelSchema({
				field: 'modifiedBy',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'notInWorkflow',
				name: '',
				fullName: '',
				description: '',
				dataType: 'boolean',
			}),
			new ModelSchema({
				field: 'permission',
				name: 'Như permission nhị phân của phần phân quyền',
				fullName: 'Như permission nhị phân của phần phân quyền',
				description: 'Như permission nhị phân của phần phân quyền',
				dataType: 'int',
			}),
			new ModelSchema({
				field: 'persistedId',
				name: '',
				fullName: '',
				description: '',
				dataType: 'int',
			}),
			new ModelSchema({
				field: 'printFileId',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'roleIds',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'serviceCode',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'synced',
				name: '',
				fullName: '',
				description: '',
				dataType: 'boolean',
			}),
			new ModelSchema({
				field: 'tableName',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'textTrangThai',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'trangThai',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'type',
				name: '',
				fullName: '',
				description: '',
				dataType: 'int',
			}),
			new ModelSchema({
				field: 'userIdCreated',
				name: '',
				fullName: '',
				description: '',
			}),
			new ModelSchema({
				field: 'userIdLastInWorkflow',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'userIds',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'userIdsCombine',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'version',
				name: '',
				fullName: '',
				description: '',
				dataType: 'int',
			}),
			new ModelSchema({
				field: 'workflowCode',
				name: '',
				fullName: '',
				description: '',
				dataType: 'string',
			}),
			new ModelSchema({
				field: 'workflowCoreStatus',
				name: '',
				fullName: '',
				description: '',
				dataType: 'int',
			}),
			new ModelSchema({
				field: 'workflowStateType',
				name: '',
				fullName: '',
				description: '',
				dataType: 'int',
			}),
			
        ];

        this.setting.cols = [
            new ColumnSchemaBase({field: 'allowEdit'}),
			new ColumnSchemaBase({field: 'code'}),
			new ColumnSchemaBase({field: 'completed'}),
			new ColumnSchemaBase({field: 'created'}),
			new ColumnSchemaBase({field: 'createdBy'}),
			new ColumnSchemaBase({field: 'currentStateCode'}),
			new ColumnSchemaBase({field: 'donViIdLastInWorkflow'}),
			new ColumnSchemaBase({field: 'donViIds'}),
			new ColumnSchemaBase({field: 'entity'}),
			new ColumnSchemaBase({field: 'entityKey'}),
			new ColumnSchemaBase({field: 'groupIds'}),
			new ColumnSchemaBase({field: 'hemisCode'}),
			new ColumnSchemaBase({field: 'hemisId'}),
			new ColumnSchemaBase({field: 'id'}),
			new ColumnSchemaBase({field: 'idHistory'}),
			new ColumnSchemaBase({field: 'isBuildIn'}),
			new ColumnSchemaBase({field: 'isBuildInAll'}),
			new ColumnSchemaBase({field: 'isDeleted'}),
			new ColumnSchemaBase({field: 'isPrivate'}),
			new ColumnSchemaBase({field: 'isPublic'}),
			new ColumnSchemaBase({field: 'itemId'}),
			new ColumnSchemaBase({field: 'link'}),
			new ColumnSchemaBase({field: 'modified'}),
			new ColumnSchemaBase({field: 'modifiedBy'}),
			new ColumnSchemaBase({field: 'notInWorkflow'}),
			new ColumnSchemaBase({field: 'permission'}),
			new ColumnSchemaBase({field: 'persistedId'}),
			new ColumnSchemaBase({field: 'printFileId'}),
			new ColumnSchemaBase({field: 'roleIds'}),
			new ColumnSchemaBase({field: 'serviceCode'}),
			new ColumnSchemaBase({field: 'synced'}),
			new ColumnSchemaBase({field: 'tableName'}),
			new ColumnSchemaBase({field: 'textTrangThai'}),
			new ColumnSchemaBase({field: 'trangThai'}),
			new ColumnSchemaBase({field: 'type'}),
			new ColumnSchemaBase({field: 'userIdCreated'}),
			new ColumnSchemaBase({field: 'userIdLastInWorkflow'}),
			new ColumnSchemaBase({field: 'userIds'}),
			new ColumnSchemaBase({field: 'userIdsCombine'}),
			new ColumnSchemaBase({field: 'version'}),
			new ColumnSchemaBase({field: 'workflowCode'}),
			new ColumnSchemaBase({field: 'workflowCoreStatus'}),
			new ColumnSchemaBase({field: 'workflowStateType'}),
			
        ];
        super.ngOnInit();
    }
}
